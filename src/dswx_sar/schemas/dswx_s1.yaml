runconfig:
    name: str()

    groups:
        pge_name_group:
            pge_name: enum('DSWX_S1_PGE')

        input_file_group:
            # REQUIRED - list of RTC products (directory or files)
            input_file_path: list(str(), min=1)

        dynamic_ancillary_file_group:
            # Digital elevation model
            dem_file: str(required=True)

            # Digital elevation model description
            dem_file_description: str(required=False)

            # Reference water body map (Required)
            # https://global-surface-water.appspot.com/download
            reference_water_file: str(required=True)

            # Pekel's water description
            reference_water_file_description: str(required=False)

            # Height Above Nearest Drainage (optional)
            hand_file: str(required=True)
            
            # HAND description
            hand_file_description: str(required=False)

            # ESA WorldCover map file
            worldcover_file: str(required=False)

            # ESA WorldCover map description
            worldcover_file_description: str(required=False)

            # NOAA GSHHS shapefile
            shoreline_shapefile: str(required=False)

            # NOAA GSHHS shapefile description
            shoreline_shapefile_description: str(required=False)

            # algorithm parameter 
            algorithm_parameters: str(required=True)

        static_ancillary_file_group:

            static_ancillary_inputs_flag: bool(required=False)

            # MGRS database sqlite file
            mgrs_database_file: str(required=False)

            # MGRS collection database sqlite file
            mgrs_collection_database_file: str(required=False)

        primary_executable:
            product_type: enum('dswx_s1', 'twele')

        product_path_group:
            # Directory where PGE will place results
            product_path: str()
       
            # Directory where SAS can write temporary data
            scratch_path: str()
       
            # Intermediate file name.  SAS writes the output product to the following file.
            # After the SAS completes, the PGE wrapper renames the product file
            # according to proper file naming conventions.
            sas_output_path: str()

            product_version: num(required=False)

            # DSWx-S1 product format (default is 'COG')
            output_imagery_format: enum('GTiff', 'COG', required=False)

            # DSWx-S1 Compression Options for COG
            output_imagery_compression: str(required=False)

            # DSWx-S1 Compression bits for COG
            output_imagery_nbits: int(min=1, required=False)

        browse_image_group:
            # Save a full-res Cloud-Optimized GEOTIFF DSWx-HLS browse image and
            # a modified-resolution PNG of the browse image for DSWx-HLS
            save_browse: bool(required=False)

            # Setting `browse_image_height` and `browse_image_width` equal
            # will maintain this original HLS and DSWx-HLS aspect ratio
            # of 3660 pixels x 3660 pixels for the PNG browse image.
            # If these fields are left empty, 1024 x 1024 will be used.

            # Height in pixels for the PNG browse image
            browse_image_height: int(min=1, required=False)

            # Width in pixels for the PNG browse image
            browse_image_width: int(min=1, required=False)

            # Flag to exclude the Partial Surface Water Aggressive (PSW-Agg)
            # class in the browse image. If True, PSW-Agg pixels will 
            # appear as Not Water. If False, this class will be displayed
            # in the browse image, same as in WTR. Default is False.
            exclude_psw_aggressive_in_browse: bool(required=False)

            # Define how Not Water (e.g. land) appears in the browse image.
            # Defaults to 'white'.
            # Options are: 'white', 'nodata'
            #   'white'         : Not Water pixels will be white
            #   'nodata'        : Not Water pixels will be marked as not having
            #                     valid data, and will be fully transparent
            not_water_in_browse: enum('white', 'nodata', required=False)

            # Define how cloud appears in the browse image.
            # Defaults to 'gray'.
            # Options are: 'gray', 'nodata'
            #   'gray'          : cloud pixels will be opaque gray
            #   'nodata'        : cloud pixels will be marked as not having
            #                     valid data, and will be fully transparent
            cloud_in_browse: enum('gray', 'nodata', required=False)

            # Define how snow appears in the browse image.
            # Defaults to 'cyan'.
            # Options are: 'cyan', 'gray', 'nodata'
            #   'cyan'          : snow will be opaque cyan
            #   'gray'          : snow will be opaque gray
            #   'nodata'        : snow pixels will be marked as not having
            #                     valid data, and will be fully transparent
            snow_in_browse: enum('cyan', 'gray', 'nodata', required=False)

        log_file: str(required=False)