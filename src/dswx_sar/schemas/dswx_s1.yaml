runconfig:
    name: str()

    groups:
        pge_name_group:
            pge_name: enum('DSWX_S1_PGE')

        input_file_group:
            # REQUIRED - list of RTC products (directory or files)
            input_file_path: list(str(), min=1)

        dynamic_ancillary_file_group:
            # Digital elevation model
            dem_file: str(required=True)

            # Digital elevation model description
            dem_file_description: str(required=False)

            # Reference water body map (Required)
            # https://global-surface-water.appspot.com/download
            reference_water_file: str(required=True)

            # Pekel's water description
            reference_water_file_description: str(required=False)

            # Height Above Nearest Drainage (optional)
            hand_file: str(required=True)
            
            # HAND description
            hand_file_description: str(required=False)

            # ESA WorldCover map file
            worldcover_file: str(required=False)

            # ESA WorldCover map description
            worldcover_file_description: str(required=False)

            # NOAA GSHHS shapefile
            shoreline_shapefile: str(required=False)

            # NOAA GSHHS shapefile description
            shoreline_shapefile_description: str(required=False)

        primary_executable:
            product_type: enum('dswx_s1', 'twele')

        product_path_group:
            # Directory where PGE will place results
            product_path: str()
       
            # Directory where SAS can write temporary data
            scratch_path: str()
       
            # Intermediate file name.  SAS writes the output product to the following file.
            # After the SAS completes, the PGE wrapper renames the product file
            # according to proper file naming conventions.
            sas_output_path: str()

            product_version: num(required=False)

        processing:
            # Algorithms for surface water extents
            # ['opera_dswx_s1', 'twele', 'opera_dswx_s1_inundated_vegetation']
            dswx_workflow: str(required=False)

            # Polarizations to be used for DSWx-SAR
            # [polarizations] for list of specific frequency(s) e.g. [VV, VH] or [VV]
            polarizations: any(list(str(min=2, max=10), min=1, max=4), str(min=4, max=4), null(), required=False)

            # Specifiy the max_value for permanent water and no_data_value for invalid pixels
            reference_water:
                max_value: num(required=False)
                no_data_value: num(required=False)

            mosaic:
                mosaic_prefix: str(required=False)
                mosaic_cog_enable: bool(required=False)

            # Flag to turn on/off the filtering for RTC image.
            # The enhanced Lee filter is available.
            filter:
                enabled: bool(required=False)
                window_size: num(min=1, max=999, required=False)

            initial_threshold:
                # Maximum tile size for initial threshold.
                maximum_tile_size:
                    x: num(required=False)
                    y: num(required=False)
                # minimum tile size for initial threshold.
                minimum_tile_size:
                    x: num(required=False)
                    y: num(required=False)
                # tile selecting strategy to identify the boundary between water and nonwater
                # ['twele', 'chini', 'bimodality', 'combined']
                # 'combined' option applies all selection strategy
                selection_method: str(required=False)
                # Stratey to interpolate the tile-based thresholds.
                # Currently, only 'smoothed' is available.
                interpolation_method: str(required=False)
                # Thresholding algorithm for initial thresholds.
                # Currently, 1) Otsu and 2) Kittler-Illingworth algorithms are available.   
                # ['otsu', 'ki']
                threshold_method: str(required=False)
                # Flag to assume the trimodal distribution.
                # If flag is false, the distribution is assumed to have bimodal distribution and
                # estimate single threshold per tile. If True, the trimodal distribution is assumed,
                # the lowest threshold is estimated.
                multi_threshold: bool(required=False)
            
            region_growing:
                # seed value for region growing start
                seed: num(min=0, max=1, required=False)
                # value where region growing is stopped
                tolerance: num(min=0, max=1, required=False)
                line_per_block: num(min=1, required=False)
        
            inundated_vegetation:
                enabled: bool(required=False)
                mode: enum('time_series', 'static_layer')
                temporal_avg_path: str(required=False)
                initial_class_path: str(required=False)
                line_per_block: num(min=1, required=False)

            # Debug mode is true, intermeidate product is generated.
            debug_mode: bool(required=False)

        log_file: str(required=False)